name: gds
# either manually started, or on a schedule
on: [ push, workflow_dispatch ]
permissions:
  contents: write
  pages: write
  id-token: write
jobs:
  yosys:
    runs-on: ubuntu-latest
    steps:
      - name: Restore cached Yosys build
        id: cache-yosys-restore
        uses: actions/cache/restore@v3
        with:
          path: ${{ github.workspace }}/yosys/
          key: yosys

      - name: Install Dependencies
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install gperf build-essential g++ bison flex libreadline-dev gawk tcl-dev libffi-dev git graphviz xdot pkg-config python2 python3 libboost-system-dev libboost-python-dev libboost-filesystem-dev zlib1g-dev iverilog

      - name: Fetch yosys
        if: steps.cache-yosys-restore.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/YosysHQ/yosys.git

      - name: Build yosys
        if: steps.cache-yosys-restore.outputs.cache-hit != 'true'
        shell: bash
        timeout-minutes: 20
        run: |
          cd yosys
          echo ${{ github.workspace }}
          pwd;#exit
          CC=gcc
          make config-$CC
          free -h
          #make -j${{ env.procs }} CC=$CC CXX=$CC LD=$CC  # OOM killed?
          make -j2 CC=$CC CXX=$CC LD=$CC

      - name: Save cached Yosys build
        id: cache-yosys-save
        uses: actions/cache/save@v3
        with:
          path: ${{ github.workspace }}/yosys/
          key: ${{ steps.cache-yosys-restore.outputs.cache-primary-key }}

      - name: Install yosys
        id: install-yosys
        run: |
          cd yosys
          sudo make install

      - name: Restore cached Yosys GHDL plugin build
        id: cache-yosys-restore-ghdl
        uses: actions/cache/restore@v3
        with:
          path: ${{ github.workspace }}/yosys-ghdl/
          key: yosys-ghdl



      - name: Fetch yosys GHDL plugin and GHDL
        if: steps.cache-yosys-restore-ghdl.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/ghdl/ghdl-yosys-plugin.git
          git clone https://github.com/ghdl/ghdl

      - name: Build GHDL
        if: steps.cache-yosys-restore-ghdl.outputs.cache-hit != 'true'
        uses: ghdl/setup-ghdl-ci@nightly
        with:
         backend: gcc

      - name: Build yosys GHDL plugin
        if: steps.cache-yosys-restore-ghdl.outputs.cache-hit != 'true'
        shell: bash
        timeout-minutes: 20
        run: |
          cd ghdl-yosys-plugin
          echo ${{ github.workspace }}
          pwd;
          CC=gcc
          make
          sudo make install
      - name: Save cached Yosys GHDL plugin build
        id: cache-yosys-save-ghdl
        uses: actions/cache/save@v3
        with:
          path: ${{ github.workspace }}/yosys-ghdl/
          key: ${{ steps.cache-yosys-restore-ghdl.outputs.cache-primary-key }}


  gds:
    needs: yosys
    env:
        OPENLANE_TAG:           2023.02.14
        OPENLANE_IMAGE_NAME:    efabless/openlane:4cd0986b3ae550cdf7a6d0fba4e0657012f635d8-amd64
        OPENLANE_ROOT:          /home/runner/openlane
        PDK_ROOT:               /home/runner/pdk
        PDK:                    sky130A

    # ubuntu
    runs-on: ubuntu-latest
    steps:
    # need the repo checked out
    - name: checkout repo
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: checkout tt tools repo
      uses: actions/checkout@v3
      with:
        repository: tinytapeout/tt-support-tools
        path: tt

    # need python
    - name: setup python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - run: pip install -r tt/requirements.txt

    # generate verilog from vhdl
    - name: generate Verilog from VHDL fileset
      run: |
        echo -n "Workdir: "; pwd
        for k in src/*.vhd; do
          entity_name=`basename $k`
          entity_name=${entity_name/.vhd/}
          verilog_name=${entity_name}.v
          echo "Entity name $entity_name"
          yosys -qm ghdl -p "ghdl -fsynopsys $k -e $entity_name; write_verilog ${k/.vhd/.v}"
        done
        ls -lah src/

    # fetch the Verilog from Wokwi API
    - name: fetch Verilog and build config
      run: ./tt/tt_tool.py --create-user-config || true

    # build OpenLane
    - name: openlane repo
      run: |
        git clone --depth=1 --branch $OPENLANE_TAG https://github.com/The-OpenROAD-Project/OpenLane.git $OPENLANE_ROOT
        cd $OPENLANE_ROOT
        make

    # run OpenLane to build the GDS
    - name: make GDS
      run: ./tt/tt_tool.py --harden

    # for debugging, show all the files
    - name: show files
      run: find runs/wokwi/

    # yosys warnings
    - name: yosys warnings
      run: ./tt/tt_tool.py --print-warnings >> $GITHUB_STEP_SUMMARY

    # print some routing stats
    - name: add summary
      run: ./tt/tt_tool.py --print-stats >> $GITHUB_STEP_SUMMARY

    # print some cell stats
    - name: cell usage summary
      run: ./tt/tt_tool.py --print-cell-category >> $GITHUB_STEP_SUMMARY

    - name: populate src cache
      uses: actions/cache@v3
      with:
        path: src
        key: ${{ runner.os }}-src-${{ github.run_id }}

    - name: populate runs cache
      uses: actions/cache@v3
      with:
        path: runs
        key: ${{ runner.os }}-runs-${{ github.run_id }}

    # create png
    - name: png
      run: ./tt/tt_tool.py --create-png

    - name: populate png cache
      uses: actions/cache@v3
      with:
        path: 'gds_render.png'
        key: ${{ runner.os }}-png-${{ github.run_id }}

##############################################################
# Generate files for the 3D viewer

  viewer:
    needs: gds
    runs-on: ubuntu-latest
    steps:
    - name: checkout GDS2glTF repo
      uses: actions/checkout@v3
      with:
        repository: mbalestrini/GDS2glTF

    - name: setup python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: restore runs cache
      uses: actions/cache@v3
      with:
        path: runs
        key: ${{ runner.os }}-runs-${{ github.run_id }}

    - name: gds2gltf
      run: |
        python -m pip install numpy gdspy triangle pygltflib
        cp runs/wokwi/results/final/gds/*.gds tinytapeout.gds
        python3 gds2gltf.py tinytapeout.gds

    - name: populate viewer cache
      uses: actions/cache@v3
      with:
        path: 'tinytapeout.gds.gltf'
        key: ${{ runner.os }}-viewer-${{ github.run_id }}

##############################################################
# Downloadable results from OpenLane

  artifact:
    needs:
    - gds
    runs-on: ubuntu-latest
    steps:
    - name: restore src cache
      uses: actions/cache@v3
      with:
        path: src
        key: ${{ runner.os }}-src-${{ github.run_id }}

    - name: restore runs cache
      uses: actions/cache@v3
      with:
        path: runs
        key: ${{ runner.os }}-runs-${{ github.run_id }}

    - name: upload artifact
      uses: actions/upload-artifact@v3
      with:
          # path depends on the tag and the module name
          name: GDS
          path: |
            src/*
            runs/wokwi/results/final/*
            runs/wokwi/reports/metrics.csv
            runs/wokwi/reports/synthesis/1-synthesis.AREA 0.stat.rpt

##############################################################
# Publish to pages to get a nicely formatted result

  pages:
    needs:
    - viewer
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    outputs:
      page_url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
    - name: restore png cache
      uses: actions/cache@v3
      with:
        path: 'gds_render.png'
        key: ${{ runner.os }}-png-${{ github.run_id }}
    - name: restore viewer cache
      uses: actions/cache@v3
      with:
        path: 'tinytapeout.gds.gltf'
        key: ${{ runner.os }}-viewer-${{ github.run_id }}
    - name: generate redirect to viewer
      run: |
        cat << EOF >> index.html
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta http-equiv="X-UA-Compatible" content="IE=edge">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Redirecting to GDS Viewer...</title>
          </head>
          <body>
            <script>
              location.href = "https://gds-viewer.tinytapeout.com/?model=" + encodeURIComponent(location.href + '/tinytapeout.gds.gltf');
            </script>
          </body>
          </html>
        EOF
    - name: Setup Pages
      uses: actions/configure-pages@v2
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v1
      with:
        path: '.'
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v1.2.2

##############################################################
# Add the 3D and 2D preview to the page

  preview:
    needs: pages
    runs-on: ubuntu-latest
    steps:
    - name: add gds preview
      run: |
        PAGE_URL=${{ needs.pages.outputs.page_url }}
        PAGE_URL=$(echo "$PAGE_URL" | sed -e 's/\/$//')
        cat << EOF >> $GITHUB_STEP_SUMMARY
        # 3D Viewer
        [open 3D viewer](https://gds-viewer.tinytapeout.com/?model=$PAGE_URL/tinytapeout.gds.gltf)
        # 2D Preview
        ![png]($PAGE_URL/gds_render.png)
        EOF
